generator client {
  provider = "go run github.com/steebchen/prisma-client-go"
  output   = "./internal/database/prisma"
  package  = "prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Provider {
  id        String    @id @default(uuid())
  slug      String    @unique
  name      String
  scheme    String
  host      String    @db.Text
  listPath  String    @db.Text
  isActive  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chapters  Chapter[]
  series    Series[]
}

model Series {
  id            String        @id @default(uuid())
  slug          String
  title         String        @db.Text
  sourcePath    String        @db.Text
  thumbnailUrl  String        @db.Text
  synopsis      String        @db.Text
  genres        Json
  providerSlug  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        Series_status @default(ONGOING)
  chaptersCount Int           @default(0)
  latestChapter String        @default("")
  chapters      Chapter[]
  provider      Provider      @relation(fields: [providerSlug], references: [slug], onDelete: Cascade)

  @@unique([providerSlug, slug], name: "seriesUnique")
  @@index([providerSlug], map: "providerIndex")
}

model Chapter {
  id           String   @id @default(uuid())
  slug         String
  number       Float
  shortTitle   String   @db.Text
  sourceHref   String   @db.Text
  fullTitle    String   @db.Text
  sourcePath   String   @db.Text
  nextSlug     String   @db.Text
  nextPath     String   @db.Text
  prevSlug     String   @db.Text
  prevPath     String   @db.Text
  contentPaths Json
  providerSlug String
  seriesSlug   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  provider     Provider @relation(fields: [providerSlug], references: [slug], onDelete: Cascade)
  series       Series   @relation(fields: [providerSlug, seriesSlug], references: [providerSlug, slug], onDelete: Cascade)

  @@unique([providerSlug, seriesSlug, slug], name: "chapterUnique")
  @@index([providerSlug], map: "providerIndex")
  @@index([providerSlug, seriesSlug], map: "seriesIndex")
}

model ScrapeRequest {
  id          String            @id @default(uuid())
  type        ScrapeRequestType
  baseUrl     String            @db.Text
  requestPath String            @db.Text
  provider    String            @db.Text
  series      String            @db.Text
  chapter     String            @db.Text
  status      String
  retries     Int
  totalTime   Float
  error       Boolean
  message     String            @db.Text
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([type], map: "typeIndex")
}

enum ScrapeRequestType {
  SERIES_LIST
  SERIES_DETAIL
  CHAPTER_LIST
  CHAPTER_DETAIL
}

enum Series_status {
  ONGOING
  COMPLETED
  DROPPED
  HIATUS
}
