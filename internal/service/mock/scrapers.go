// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/scrapers.go
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/service/mock/scrapers.go -source internal/service/scrapers.go ScrapeRequestRepository,ScrapeRequestMessageBroker
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	internal "fourleaves.studio/manga-scraper/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockScrapeRequestRepository is a mock of ScrapeRequestRepository interface.
type MockScrapeRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScrapeRequestRepositoryMockRecorder
}

// MockScrapeRequestRepositoryMockRecorder is the mock recorder for MockScrapeRequestRepository.
type MockScrapeRequestRepositoryMockRecorder struct {
	mock *MockScrapeRequestRepository
}

// NewMockScrapeRequestRepository creates a new mock instance.
func NewMockScrapeRequestRepository(ctrl *gomock.Controller) *MockScrapeRequestRepository {
	mock := &MockScrapeRequestRepository{ctrl: ctrl}
	mock.recorder = &MockScrapeRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapeRequestRepository) EXPECT() *MockScrapeRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScrapeRequestRepository) Create(ctx context.Context, params internal.CreateScrapeRequestParams) (internal.ScrapeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(internal.ScrapeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockScrapeRequestRepositoryMockRecorder) Create(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScrapeRequestRepository)(nil).Create), ctx, params)
}

// Delete mocks base method.
func (m *MockScrapeRequestRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScrapeRequestRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScrapeRequestRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockScrapeRequestRepository) Find(ctx context.Context, id string) (internal.ScrapeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(internal.ScrapeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockScrapeRequestRepositoryMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockScrapeRequestRepository)(nil).Find), ctx, id)
}

// FindPendings mocks base method.
func (m *MockScrapeRequestRepository) FindPendings(ctx context.Context, params internal.FindScrapeRequestParams) ([]internal.ScrapeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPendings", ctx, params)
	ret0, _ := ret[0].([]internal.ScrapeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPendings indicates an expected call of FindPendings.
func (mr *MockScrapeRequestRepositoryMockRecorder) FindPendings(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPendings", reflect.TypeOf((*MockScrapeRequestRepository)(nil).FindPendings), ctx, params)
}

// Update mocks base method.
func (m *MockScrapeRequestRepository) Update(ctx context.Context, params internal.UpdateScrapeRequestParams) (internal.ScrapeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, params)
	ret0, _ := ret[0].(internal.ScrapeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockScrapeRequestRepositoryMockRecorder) Update(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScrapeRequestRepository)(nil).Update), ctx, params)
}

// MockScrapeRequestMessageBroker is a mock of ScrapeRequestMessageBroker interface.
type MockScrapeRequestMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockScrapeRequestMessageBrokerMockRecorder
}

// MockScrapeRequestMessageBrokerMockRecorder is the mock recorder for MockScrapeRequestMessageBroker.
type MockScrapeRequestMessageBrokerMockRecorder struct {
	mock *MockScrapeRequestMessageBroker
}

// NewMockScrapeRequestMessageBroker creates a new mock instance.
func NewMockScrapeRequestMessageBroker(ctrl *gomock.Controller) *MockScrapeRequestMessageBroker {
	mock := &MockScrapeRequestMessageBroker{ctrl: ctrl}
	mock.recorder = &MockScrapeRequestMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrapeRequestMessageBroker) EXPECT() *MockScrapeRequestMessageBrokerMockRecorder {
	return m.recorder
}

// Created mocks base method.
func (m *MockScrapeRequestMessageBroker) Created(ctx context.Context, params internal.ScrapeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Created", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Created indicates an expected call of Created.
func (mr *MockScrapeRequestMessageBrokerMockRecorder) Created(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Created", reflect.TypeOf((*MockScrapeRequestMessageBroker)(nil).Created), ctx, params)
}
