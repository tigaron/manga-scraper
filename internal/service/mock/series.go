// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/series.go
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/service/mock/series.go -source internal/service/series.go SeriesRepository,SeriesSearchRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	internal "fourleaves.studio/manga-scraper/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockSeriesRepository is a mock of SeriesRepository interface.
type MockSeriesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSeriesRepositoryMockRecorder
}

// MockSeriesRepositoryMockRecorder is the mock recorder for MockSeriesRepository.
type MockSeriesRepositoryMockRecorder struct {
	mock *MockSeriesRepository
}

// NewMockSeriesRepository creates a new mock instance.
func NewMockSeriesRepository(ctrl *gomock.Controller) *MockSeriesRepository {
	mock := &MockSeriesRepository{ctrl: ctrl}
	mock.recorder = &MockSeriesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeriesRepository) EXPECT() *MockSeriesRepositoryMockRecorder {
	return m.recorder
}

// CreateInit mocks base method.
func (m *MockSeriesRepository) CreateInit(ctx context.Context, params internal.CreateInitSeriesParams) (internal.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInit", ctx, params)
	ret0, _ := ret[0].(internal.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInit indicates an expected call of CreateInit.
func (mr *MockSeriesRepositoryMockRecorder) CreateInit(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInit", reflect.TypeOf((*MockSeriesRepository)(nil).CreateInit), ctx, params)
}

// Delete mocks base method.
func (m *MockSeriesRepository) Delete(ctx context.Context, params internal.FindSeriesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSeriesRepositoryMockRecorder) Delete(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSeriesRepository)(nil).Delete), ctx, params)
}

// Find mocks base method.
func (m *MockSeriesRepository) Find(ctx context.Context, params internal.FindSeriesParams) (internal.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, params)
	ret0, _ := ret[0].(internal.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSeriesRepositoryMockRecorder) Find(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSeriesRepository)(nil).Find), ctx, params)
}

// FindAll mocks base method.
func (m *MockSeriesRepository) FindAll(ctx context.Context, params internal.FindSeriesParams) ([]internal.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, params)
	ret0, _ := ret[0].([]internal.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSeriesRepositoryMockRecorder) FindAll(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSeriesRepository)(nil).FindAll), ctx, params)
}

// FindBC mocks base method.
func (m *MockSeriesRepository) FindBC(ctx context.Context, params internal.FindSeriesParams) (internal.SeriesBC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBC", ctx, params)
	ret0, _ := ret[0].(internal.SeriesBC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBC indicates an expected call of FindBC.
func (mr *MockSeriesRepositoryMockRecorder) FindBC(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBC", reflect.TypeOf((*MockSeriesRepository)(nil).FindBC), ctx, params)
}

// FindPaginated mocks base method.
func (m *MockSeriesRepository) FindPaginated(ctx context.Context, params internal.FindSeriesParams) ([]internal.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaginated", ctx, params)
	ret0, _ := ret[0].([]internal.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaginated indicates an expected call of FindPaginated.
func (mr *MockSeriesRepositoryMockRecorder) FindPaginated(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaginated", reflect.TypeOf((*MockSeriesRepository)(nil).FindPaginated), ctx, params)
}

// UpdateInit mocks base method.
func (m *MockSeriesRepository) UpdateInit(ctx context.Context, params internal.UpdateInitSeriesParams) (internal.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInit", ctx, params)
	ret0, _ := ret[0].(internal.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInit indicates an expected call of UpdateInit.
func (mr *MockSeriesRepositoryMockRecorder) UpdateInit(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInit", reflect.TypeOf((*MockSeriesRepository)(nil).UpdateInit), ctx, params)
}

// UpdateLatest mocks base method.
func (m *MockSeriesRepository) UpdateLatest(ctx context.Context, params internal.UpdateLatestSeriesParams) (internal.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLatest", ctx, params)
	ret0, _ := ret[0].(internal.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLatest indicates an expected call of UpdateLatest.
func (mr *MockSeriesRepositoryMockRecorder) UpdateLatest(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLatest", reflect.TypeOf((*MockSeriesRepository)(nil).UpdateLatest), ctx, params)
}

// MockSeriesSearchRepository is a mock of SeriesSearchRepository interface.
type MockSeriesSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSeriesSearchRepositoryMockRecorder
}

// MockSeriesSearchRepositoryMockRecorder is the mock recorder for MockSeriesSearchRepository.
type MockSeriesSearchRepositoryMockRecorder struct {
	mock *MockSeriesSearchRepository
}

// NewMockSeriesSearchRepository creates a new mock instance.
func NewMockSeriesSearchRepository(ctrl *gomock.Controller) *MockSeriesSearchRepository {
	mock := &MockSeriesSearchRepository{ctrl: ctrl}
	mock.recorder = &MockSeriesSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeriesSearchRepository) EXPECT() *MockSeriesSearchRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSeriesSearchRepository) Delete(ctx context.Context, provider, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, provider, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSeriesSearchRepositoryMockRecorder) Delete(ctx, provider, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSeriesSearchRepository)(nil).Delete), ctx, provider, slug)
}

// Index mocks base method.
func (m *MockSeriesSearchRepository) Index(ctx context.Context, series internal.Series) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, series)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockSeriesSearchRepositoryMockRecorder) Index(ctx, series any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockSeriesSearchRepository)(nil).Index), ctx, series)
}

// Search mocks base method.
func (m *MockSeriesSearchRepository) Search(ctx context.Context, q string) ([]internal.Series, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]internal.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSeriesSearchRepositoryMockRecorder) Search(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSeriesSearchRepository)(nil).Search), ctx, q)
}
