// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/chapters.go
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/service/mock/chapters.go -source internal/service/chapters.go ChapterRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	internal "fourleaves.studio/manga-scraper/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockChapterRepository is a mock of ChapterRepository interface.
type MockChapterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChapterRepositoryMockRecorder
}

// MockChapterRepositoryMockRecorder is the mock recorder for MockChapterRepository.
type MockChapterRepositoryMockRecorder struct {
	mock *MockChapterRepository
}

// NewMockChapterRepository creates a new mock instance.
func NewMockChapterRepository(ctrl *gomock.Controller) *MockChapterRepository {
	mock := &MockChapterRepository{ctrl: ctrl}
	mock.recorder = &MockChapterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChapterRepository) EXPECT() *MockChapterRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockChapterRepository) Count(ctx context.Context, params internal.FindChapterParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockChapterRepositoryMockRecorder) Count(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockChapterRepository)(nil).Count), ctx, params)
}

// CreateInit mocks base method.
func (m *MockChapterRepository) CreateInit(ctx context.Context, params internal.CreateInitChapterParams) (internal.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInit", ctx, params)
	ret0, _ := ret[0].(internal.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInit indicates an expected call of CreateInit.
func (mr *MockChapterRepositoryMockRecorder) CreateInit(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInit", reflect.TypeOf((*MockChapterRepository)(nil).CreateInit), ctx, params)
}

// Delete mocks base method.
func (m *MockChapterRepository) Delete(ctx context.Context, params internal.FindChapterParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChapterRepositoryMockRecorder) Delete(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChapterRepository)(nil).Delete), ctx, params)
}

// Find mocks base method.
func (m *MockChapterRepository) Find(ctx context.Context, params internal.FindChapterParams) (internal.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, params)
	ret0, _ := ret[0].(internal.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockChapterRepositoryMockRecorder) Find(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockChapterRepository)(nil).Find), ctx, params)
}

// FindAll mocks base method.
func (m *MockChapterRepository) FindAll(ctx context.Context, params internal.FindChapterParams) ([]internal.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, params)
	ret0, _ := ret[0].([]internal.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockChapterRepositoryMockRecorder) FindAll(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockChapterRepository)(nil).FindAll), ctx, params)
}

// FindBC mocks base method.
func (m *MockChapterRepository) FindBC(ctx context.Context, params internal.FindChapterParams) (internal.ChapterBC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBC", ctx, params)
	ret0, _ := ret[0].(internal.ChapterBC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBC indicates an expected call of FindBC.
func (mr *MockChapterRepositoryMockRecorder) FindBC(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBC", reflect.TypeOf((*MockChapterRepository)(nil).FindBC), ctx, params)
}

// FindLatest mocks base method.
func (m *MockChapterRepository) FindLatest(ctx context.Context, params internal.FindChapterParams) (internal.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatest", ctx, params)
	ret0, _ := ret[0].(internal.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatest indicates an expected call of FindLatest.
func (mr *MockChapterRepositoryMockRecorder) FindLatest(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatest", reflect.TypeOf((*MockChapterRepository)(nil).FindLatest), ctx, params)
}

// FindListWithRel mocks base method.
func (m *MockChapterRepository) FindListWithRel(ctx context.Context, params internal.FindChapterParams) (internal.ChapterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListWithRel", ctx, params)
	ret0, _ := ret[0].(internal.ChapterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListWithRel indicates an expected call of FindListWithRel.
func (mr *MockChapterRepositoryMockRecorder) FindListWithRel(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListWithRel", reflect.TypeOf((*MockChapterRepository)(nil).FindListWithRel), ctx, params)
}

// FindPaginated mocks base method.
func (m *MockChapterRepository) FindPaginated(ctx context.Context, params internal.FindChapterParams) ([]internal.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPaginated", ctx, params)
	ret0, _ := ret[0].([]internal.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPaginated indicates an expected call of FindPaginated.
func (mr *MockChapterRepositoryMockRecorder) FindPaginated(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPaginated", reflect.TypeOf((*MockChapterRepository)(nil).FindPaginated), ctx, params)
}

// UpdateInit mocks base method.
func (m *MockChapterRepository) UpdateInit(ctx context.Context, params internal.UpdateInitChapterParams) (internal.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInit", ctx, params)
	ret0, _ := ret[0].(internal.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInit indicates an expected call of UpdateInit.
func (mr *MockChapterRepositoryMockRecorder) UpdateInit(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInit", reflect.TypeOf((*MockChapterRepository)(nil).UpdateInit), ctx, params)
}
